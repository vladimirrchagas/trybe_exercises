{"ast":null,"code":"var _jsxFileName = \"/home/vladimir/trybe-course/trybe_exercises/bloco_16/dia_4/exercise-game-of-thrones-characters/src/components/CharacterInfo.js\";\nimport PropTypes from 'prop-types';\nimport React from 'react'; // importe o connect do 'react-redux';\n\nimport { connect } from 'react-redux';\n\nclass CharacterInfo extends React.Component {\n  render() {\n    //faça a desestruturação das props aqui\n    const {\n      loading,\n      character,\n      error\n    } = this.props.data;\n\n    if (!loading && character) {\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 11\n        }\n      }, \"Name: \", character.name), /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 11\n        }\n      }, \"Gender: \", character.gender), /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }\n      }, \"Aliases: \", character.aliases.map((alias, index) => /*#__PURE__*/React.createElement(\"p\", {\n        key: `${alias}-${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 65\n        }\n      }, alias))), /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }\n      }, \"Books: \", character.books.map((book, index) => /*#__PURE__*/React.createElement(\"p\", {\n        key: `${book}-${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 60\n        }\n      }, book))));\n    }\n\n    if (error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 25\n        }\n      }, error);\n    }\n\n    if (loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 27\n        }\n      }, \"Loading...\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 12\n      }\n    }, \"Type a character name and click to search!\");\n  }\n\n}\n\n; //mapeie o estado global para a propriedade da sua aplicação\n\nconst mapStateToProps = state => ({\n  data: state\n}); // conecte este componente ao redux aqui\n\n\nexport default connect(mapStateToProps)(CharacterInfo); //faça as propTypes\n\nCharacterInfo.propTypes = {\n  data: PropTypes.Object({\n    loading: PropTypes.any,\n    character: PropTypes.shape({\n      aliases: PropTypes.shape({\n        map: PropTypes.func\n      }),\n      books: PropTypes.shape({\n        map: PropTypes.func\n      }),\n      gender: PropTypes.any,\n      name: PropTypes.any\n    }),\n    error: PropTypes.any\n  })\n};","map":{"version":3,"sources":["/home/vladimir/trybe-course/trybe_exercises/bloco_16/dia_4/exercise-game-of-thrones-characters/src/components/CharacterInfo.js"],"names":["PropTypes","React","connect","CharacterInfo","Component","render","loading","character","error","props","data","name","gender","aliases","map","alias","index","books","book","mapStateToProps","state","propTypes","Object","any","shape","func"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,aAAN,SAA4BF,KAAK,CAACG,SAAlC,CAA4C;AAC1CC,EAAAA,MAAM,GAAG;AACP;AACA,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,SAAX;AAAsBC,MAAAA;AAAtB,QAAgC,KAAKC,KAAL,CAAWC,IAAjD;;AACA,QAAI,CAACJ,OAAD,IAAYC,SAAhB,EAA2B;AACzB,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAWA,SAAS,CAACI,IAArB,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAaJ,SAAS,CAACK,MAAvB,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAcL,SAAS,CAACM,OAAV,CAAkBC,GAAlB,CAAsB,CAACC,KAAD,EAAQC,KAAR,kBAAkB;AAAG,QAAA,GAAG,EAAG,GAAED,KAAM,IAAGC,KAAM,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8BD,KAA9B,CAAxC,CAAd,CAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAYR,SAAS,CAACU,KAAV,CAAgBH,GAAhB,CAAoB,CAACI,IAAD,EAAOF,KAAP,kBAAiB;AAAG,QAAA,GAAG,EAAG,GAAEE,IAAK,IAAGF,KAAM,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6BE,IAA7B,CAArC,CAAZ,CAJF,CADF;AAQD;;AACD,QAAIV,KAAJ,EAAW;AAAE,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMA,KAAN,CAAP;AAA4B;;AACzC,QAAIF,OAAJ,EAAa;AAAE,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AAA+B;;AAC9C,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAAP;AACD;;AAjByC;;AAkB3C,C,CAED;;AACA,MAAMa,eAAe,GAAIC,KAAD,KAAY;AAClCV,EAAAA,IAAI,EAAEU;AAD4B,CAAZ,CAAxB,C,CAIA;;;AACA,eAAelB,OAAO,CAACiB,eAAD,CAAP,CAAyBhB,aAAzB,CAAf,C,CAEA;;AACAA,aAAa,CAACkB,SAAd,GAA0B;AACxBX,EAAAA,IAAI,EAAEV,SAAS,CAACsB,MAAV,CAAiB;AACrBhB,IAAAA,OAAO,EAAEN,SAAS,CAACuB,GADE;AAErBhB,IAAAA,SAAS,EAAEP,SAAS,CAACwB,KAAV,CAAgB;AACzBX,MAAAA,OAAO,EAAEb,SAAS,CAACwB,KAAV,CAAgB;AACvBV,QAAAA,GAAG,EAAEd,SAAS,CAACyB;AADQ,OAAhB,CADgB;AAIzBR,MAAAA,KAAK,EAAEjB,SAAS,CAACwB,KAAV,CAAgB;AACrBV,QAAAA,GAAG,EAAEd,SAAS,CAACyB;AADM,OAAhB,CAJkB;AAOzBb,MAAAA,MAAM,EAAEZ,SAAS,CAACuB,GAPO;AAQzBZ,MAAAA,IAAI,EAAEX,SAAS,CAACuB;AARS,KAAhB,CAFU;AAYrBf,IAAAA,KAAK,EAAER,SAAS,CAACuB;AAZI,GAAjB;AADkB,CAA1B","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n// importe o connect do 'react-redux';\nimport { connect } from 'react-redux';\n\nclass CharacterInfo extends React.Component {\n  render() {\n    //faça a desestruturação das props aqui\n    const { loading, character, error } = this.props.data;\n    if (!loading && character) {\n      return (\n        <ul>\n          <li>Name: {character.name}</li>\n          <li>Gender: {character.gender}</li>\n          <li>Aliases: {character.aliases.map((alias, index) => <p key={`${alias}-${index}`}>{alias}</p>)}</li>\n          <li>Books: {character.books.map((book, index) => <p key={`${book}-${index}`}>{book}</p>)}</li>\n        </ul>\n      )\n    }\n    if (error) { return <div>{error}</div>; }\n    if (loading) { return <div>Loading...</div>; }\n    return <div>Type a character name and click to search!</div>;\n  }\n};\n\n//mapeie o estado global para a propriedade da sua aplicação\nconst mapStateToProps = (state) => ({\n  data: state,\n});\n\n// conecte este componente ao redux aqui\nexport default connect(mapStateToProps)(CharacterInfo);\n\n//faça as propTypes\nCharacterInfo.propTypes = {\n  data: PropTypes.Object({\n    loading: PropTypes.any,\n    character: PropTypes.shape({\n      aliases: PropTypes.shape({\n        map: PropTypes.func\n      }),\n      books: PropTypes.shape({\n        map: PropTypes.func\n      }),\n      gender: PropTypes.any,\n      name: PropTypes.any\n    }),\n    error: PropTypes.any\n  })\n}\n"]},"metadata":{},"sourceType":"module"}